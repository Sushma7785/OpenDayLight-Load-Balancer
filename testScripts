1) Complete script to create topology and run test

#!/usr/bin/python

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.util import irange,dumpNodeConnections
from mininet.log import setLogLevel
from mininet.cli import CLI
from mininet.link import TCLink
from mininet.node import CPULimitedHost
from functools import partial
from mininet.node import OVSSwitch, Controller, RemoteController
import time

linkopts = dict(bw=10)
class MyTopo( Topo ):

    def __init__( self ):
        "Create custom topo."

        # Initialize topology
        Topo.__init__( self )

        # Add hosts and switches
        host1 = self.addHost( 'h1' )
        host2 = self.addHost( 'h2' )
	host3 = self.addHost( 'h3' )
	host4 = self.addHost( 'h4' )
	host5 = self.addHost( 'h5' )
	host6 = self.addHost( 'h6' )
	host7 = self.addHost( 'h7' )
	host8 = self.addHost( 'h8' )
	host9 = self.addHost( 'h9' )
        host10 = self.addHost( 'h10' )
        host11 = self.addHost( 'h11' )
        host12 = self.addHost( 'h12' )
        switch1 = self.addSwitch( 's1' )
        switch2 = self.addSwitch( 's2' )
	switch3 = self.addSwitch( 's3' )
        switch4 = self.addSwitch( 's4' )
	switch5 = self.addSwitch( 's5' )
        switch6 = self.addSwitch( 's6' )
	switch7 = self.addSwitch( 's7' )
        switch8 = self.addSwitch( 's8' )
	switch9 = self.addSwitch( 's9' )
        switch10 = self.addSwitch( 's10' )
        switch11 = self.addSwitch( 's11' )
        switch12 = self.addSwitch( 's12' )
        switch13 = self.addSwitch( 's13' )
        switch14 = self.addSwitch( 's14' )
        switch15 = self.addSwitch( 's15' )
        switch16 = self.addSwitch( 's16' )
        switch17 = self.addSwitch( 's17' )
        switch18 = self.addSwitch( 's18' )
        switch19 = self.addSwitch( 's19' )
        switch20 = self.addSwitch( 's20' )
	switch21 = self.addSwitch( 's21' )
	# Add links
        self.addLink( host1, switch1, **linkopts )
	self.addLink( host2, switch1, **linkopts )
	self.addLink( host3, switch1, **linkopts )
	self.addLink( host5, switch1, **linkopts )
        self.addLink( host7, switch1, **linkopts )
        self.addLink( host9, switch1, **linkopts )
	self.addLink( host10, switch1, **linkopts )
        self.addLink( host11, switch1, **linkopts )
        self.addLink( host12, switch1, **linkopts )
	self.addLink( switch1, switch2, **linkopts )
	self.addLink( switch1, switch4, **linkopts )
	self.addLink( switch1, switch7, **linkopts )
	self.addLink( switch1, switch10, **linkopts )
        self.addLink( switch1, switch12, **linkopts )
        self.addLink( switch1, switch15, **linkopts )
	self.addLink( switch1, switch17, **linkopts )
	self.addLink( switch1, switch21, **linkopts )
	self.addLink( switch2, switch3, **linkopts )
	self.addLink( switch3, switch8, **linkopts )
	self.addLink( switch4, switch5, **linkopts )
	self.addLink( switch5, switch6, **linkopts )
	self.addLink( switch6, switch8, **linkopts )
	self.addLink( switch7, switch8, **linkopts )
	self.addLink( switch21, switch9, **linkopts )
	self.addLink( switch10, switch11, **linkopts )
	self.addLink( switch11, switch9, **linkopts )
	self.addLink( switch12, switch13, **linkopts )
	self.addLink( switch13, switch14, **linkopts )
	self.addLink( switch14, switch9, **linkopts )
	self.addLink( switch15, switch16, **linkopts )
	self.addLink( switch16, switch20, **linkopts )
	self.addLink( switch17, switch18, **linkopts )
	self.addLink( switch18, switch19, **linkopts )
	self.addLink( switch19, switch20, **linkopts )
	self.addLink( switch20, host8, bw=30 )
	self.addLink( switch8, host4, bw=30 )
	self.addLink( switch9, host6, bw=30 )

topos = { 'mytopoTest': ( lambda: MyTopo() ) }

def Test():
	topo = MyTopo()
	net = Mininet( topo=topo, link=TCLink, host=CPULimitedHost, controller=partial( RemoteController, ip='192.168.1.11', port=6633 ) )
	net.start()
	net.pingAll()
	net.pingAll()
	h1 = net.getNodeByName('h1')
    	h2 = net.getNodeByName('h2')
	h3 = net.getNodeByName('h3')
        h4 = net.getNodeByName('h4')
	h5 = net.getNodeByName('h5')
    	h6 = net.getNodeByName('h6')
	h7 = net.getNodeByName('h7')
    	h8 = net.getNodeByName('h8')
	h9 = net.getNodeByName('h9')
        h10 = net.getNodeByName('h10')
        h11 = net.getNodeByName('h11')
        h12 = net.getNodeByName('h12')
	h1.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
	h2.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
	h3.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
	h5.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
	h7.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
	h9.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
        h10.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
        h11.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
        h12.cmd( 'arp -s 10.0.0.20 00:00:10:00:00:20' )
        h4.cmd( 'arp -s 10.0.0.40 00:00:10:00:00:40' )
        h6.cmd( 'arp -s 10.0.0.40 00:00:10:00:00:40' )
        h8.cmd( 'arp -s 10.0.0.40 00:00:10:00:00:40' )
	h4.cmd( 'umount /sys' )
	h6.cmd( 'umount /sys' )
	h8.cmd( 'umount /sys' )
	time.sleep( 5 )
	h4.cmd( 'nohup ./loadh4.sh &' )
	h6.cmd( 'nohup ./loadh6.sh &' )
	h8.cmd( 'nohup ./loadh8.sh &' )
	time.sleep( 2 )
	h4.cmd( 'nohup ./sendUDPpct4.py &' )
  h6.cmd( 'nohup ./sendUDPpct6.py &' )
  h8.cmd( 'nohup ./sendUDPpct8.py &' )
	      h4.cmd( 'nohup iperf -s -p 5550 -w 256KB &' )
        h6.cmd( 'nohup iperf -s -p 5550 -w 256KB &' )
        h8.cmd( 'nohup iperf -s -p 5550 -w 256KB &' )
        h1.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h2.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h3.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h5.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h7.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h9.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h10.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h11.cmd( 'nohup ./cmd2.sh &')
        time.sleep( 5 )
        h12.cmd( 'nohup ./cmd2.sh &')
	CLI(net)
	net.stop()

if __name__ == '__main__':
	setLogLevel('info')
	Test()

2) Generate traffic from clients

#!/bin/bash
SECONDS=0
while [[ SECONDS -lt 600 ]];
do
	iperf -c 10.0.0.20 -u  -t 60 -i 10 -p 5550 -y C >> output.txt
	sleep 6
done

3) Load the server CPUâ€™s

#!/bin/bash
SECONDS=0
while [[ SECONDS -lt 600 ]];
do
        stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 60
        sleep 10
        stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 60
        sleep 10
done

4) Send UDP packets from servers reporting their CPU load


#!/usr/bin/python
import socket
import subprocess
import time
import struct
import multiprocessing
# addressing information of target
start = time.time()
end = time.time()
cpus = multiprocessing.cpu_count()
def getCpuUsage():
	with open("/sys/fs/cgroup/cpuacct/h4/cpuacct.usage",'rb') as f:
		return int(f.read())

while (end - start <= 600):
	IPADDR = '10.0.0.40'
	startUsage = getCpuUsage()
	time.sleep(5)
	endUsage = getCpuUsage()
	p = float(1.0 * (endUsage - startUsage) / 1000000000)
	PORTNUM = int((p*100)/5)
	# enter the data content of the UDP packet as hex
	PACKETDATA = 'udp packet'

	# initialize a socket, think of it as a cable
	# SOCK_DGRAM specifies that this is UDP
	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM,0)

	# connect the socket, think of it as connecting the cable to the address location
	s.connect((IPADDR, PORTNUM))

	# send the command
	s.send(PACKETDATA)

	#close the socket
	s.close()
	end = time.time()

5) Rest API to configure Load balancer service

#!/bin/bash

curl --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X POST http://192.168.1.11:8080/one/nb/v2/lb/default/create/vip -d '{"name":"VIP-RR","ip":"10.0.0.20","protocol":"TCP","port":"80","poolname":"PoolRR"}'

curl --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X POST http://192.168.1.11:8080/one/nb/v2/lb/default/create/pool -d '{"name":"PoolRR","lbmethod":"Ant"}'

curl --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X POST http://192.168.1.11:8080/one/nb/v2/lb/default/create/poolmember -d '{"name":"PM2","ip":"10.0.0.4","poolname":"PoolRR"}'

curl --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X POST http://192.168.1.11:8080/one/nb/v2/lb/default/create/poolmember -d '{"name":"PM3","ip":"10.0.0.6","poolname":"PoolRR"}'

curl --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X POST http://192.168.1.11:8080/one/nb/v2/lb/default/create/poolmember -d '{"name":"PM8","ip":"10.0.0.8","poolname":"PoolRR"}'



